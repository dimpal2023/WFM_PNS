@model IEnumerable<Wfm.App.Core.Model.GenerateCardViewModel>
@{
    Layout = null;
}
<style>
    .cardTr {
        position: relative;
    }
        .cardTr::after {
            content: "";
            background-image: url(/Content/IdCardImages/karamIcon.png);
            background-repeat: no-repeat;
            background-position: center center;
            background-size: 182px;
            opacity: 0.1; /* set your opacity */
            top: 0;
            left: 0;
            bottom: 0;
            right: 0;
            position: absolute;
            z-index: -1;
        }
</style>
<section class="content">
    <div class="container-fluid">
        <div class="block-header">
            <div class="row">
                <div class="col-xs-12 col-sm-12 col-md-12 col-lg-12">
                    

                </div>
            </div>
        </div>
        <div class="row">
            <div class="col-lg-12 col-md-12 col-sm-12">
                <div class="header" style="margin: 1% 10% 1% 10%;">
                    <a href="/IDCardGeneration/GetEmployess">
                        <i class="fas fa-layer-group"></i> Back to Employee
                    </a>
                </div>
                <div class="card" style="margin: 1% 10% 1% 10%;">
                    <div class="header">
                        <h2>
                            <strong>Employee</strong> Cards&nbsp;&nbsp;
                            <input type='button' id='btn' value='Print' onclick='printDiv();'>
                            <input type="button" id="downloadBtn1" value="Download" />
                        </h2>
                    </div>
                    <div class="body" id='DivIdToPrint'>
                        @foreach (var item in Model)
                        {
                            <div>@Html.Raw(item.EmployeeCard)</div>
                        }
                    </div>
                    <div class="header">
                        <h2>
                            <strong>Employee</strong> Cards&nbsp;&nbsp;
                            <input type='button' id='btn' value='Print' onclick='printDiv();'>
                            <input type="button" id="downloadBtn2" value="Download" />
                        </h2>
                    </div>
                </div>
            </div>
                
            </div>
        </div>
    </section>
<script src="~/Scripts/jquery-3.3.1.js"></script> 
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/jspdf/1.5.3/jspdf.debug.js"></script>
<script type="text/javascript" src="https://cdnjs.cloudflare.com/ajax/libs/html2canvas/0.5.0-beta4/html2canvas.min.js"></script>
<script>
    function printDiv() {

        var divToPrint = document.getElementById('DivIdToPrint');
        var newWin = window.open('', 'Print-Window');
        newWin.document.open();
        newWin.document.write('<html><body onload="window.print()">' + divToPrint.innerHTML + '</body></html>');
        newWin.document.close();
        setTimeout(function () { newWin.close(); }, 10);

    }

    $('#downloadBtn1').on('click', function () {
        Download();
    });
    $('#downloadBtn2').on('click', function () {
        Download();
    });

    function Download() {
        var elementHTML = document.getElementById('DivIdToPrint');

        html2canvas(elementHTML, {
            useCORS: true,
            onrendered: function (canvas) {
                var pdf = new jsPDF('p', 'pt', 'a4');

                var pageHeight = 980;
                var pageWidth = 1100;
                for (var i = 0; i <= elementHTML.clientHeight / pageHeight; i++) {
                    var srcImg = canvas;
                    var sX = -50;
                    var sY = pageHeight * i; // start 1 pageHeight down for every new page
                    var sWidth = pageWidth;
                    var sHeight = pageHeight;
                    var dX = -50;
                    var dY = 0;
                    var dWidth = pageWidth;
                    var dHeight = pageHeight;

                    window.onePageCanvas = document.createElement("canvas");
                    onePageCanvas.setAttribute('width', pageWidth);
                    onePageCanvas.setAttribute('height', pageHeight);
                    var ctx = onePageCanvas.getContext('2d');
                    ctx.drawImage(srcImg, sX, sY, sWidth, sHeight, dX, dY, dWidth, dHeight);

                    var canvasDataURL = onePageCanvas.toDataURL("image/png", 1.0);
                    var width = onePageCanvas.width;
                    var height = onePageCanvas.clientHeight;

                    if (i > 0) // if we're on anything other than the first page, add another page
                        pdf.addPage(612, 864); // 8.5" x 12" in pts (inches*72)

                    pdf.setPage(i + 1); // now we declare that we're working on that page
                    pdf.addImage(canvasDataURL, 'PNG', 20, 40, (width * .62), (height * .62)); // add content to the page
                }

                // Save the PDF
                pdf.save('document.pdf');
            }
        });
    }
        
        
    
</script>